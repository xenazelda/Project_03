import calendar
import random

# CREATES AVAILABILITY SCHEDULE FOR EACH INDIVIDUAL EMPLOYEE
class Caregiver:
    def __init__(self, name):
        self.name = name

    def schedule_for_caregiver(self):
        schedule = {}
        for day in range(1, 8):  # establishes availability each day of the week
            schedule[day] = {"7:00AM - 1:00PM": "available",
                             "1:00PM - 7:00PM": "available"}

        for day in range(1, 8):
            name_of_day = list(calendar.day_name)
            print(f"\nAvailability for {name_of_day[day - 1]} for {self.name}")

            # Gets availability for morning shift
            morning_shift = input("Morning shift (7:00AM - 1:00PM): Enter 'preferred', 'available', or 'NA': ").strip().lower()
            while morning_shift not in ["preferred", "available", "na"]:
                morning_shift = input("Your input was invalid, please choose between 'preferred', 'available', or 'NA': ").strip().lower()
            schedule[day]["7:00AM - 1:00PM"] = morning_shift

            # Get availability for afternoon shift
            afternoon_shift = input("Afternoon shift (1:00PM - 7:00PM): Enter 'preferred', 'available', or 'NA': ").strip().lower()
            while afternoon_shift not in ["preferred", "available", "na"]:
                afternoon_shift = input("Your input was invalid, please choose between 'preferred', 'available', or 'NA': ").strip().lower()
            schedule[day]["1:00PM - 7:00PM"] = afternoon_shift

        return schedule


class Caregiver_Schedule(Caregiver):  # creates attributes for individual caregiver
    def __init__(self, name, phone, email, payrate):
        super().__init__(name)
        self.phone = phone
        self.email = email
        self.payrate = payrate
        self.hours_worked = 0  # tracks total hours worked for caregiver

    def calculate_weekly_pay(self):  # calculates pay for caregiver (weekly)
        return self.hours_worked * self.payrate

    def calculate_monthly_pay(self):  # calculates pay for caregiver (monthly)
        return self.calculate_weekly_pay() * 4

    def display_schedule_as_html(self, final_schedule):  # Create the HTML structure
        html_schedule = f"""
        <html>
        <head>
            <title>Caregiver Availability Schedule</title>
            <style>
                table {{
                    border-collapse: collapse;
                    width: 100%;
                    margin: 20px 0;
                }}
                th, td {{
                    border: 1px solid black;
                    padding: 10px;
                    text-align: center;
                }}
                th {{
                    background-color: #f2f2f2;
                }}
                td {{
                    height: 100px;
                    vertical-align: top;
                }}
            </style>
        </head>
        <body>
            <h1>Caregiver Availability Schedule</h1>
            <table>
                <tr>
                    <th>Mon</th>
                    <th>Tue</th>
                    <th>Wed</th>
                    <th>Thu</th>
                    <th>Fri</th>
                    <th>Sat</th>
                    <th>Sun</th>
                </tr>
                <tr>
        """

        for day in range(1, 8):  # fills in the schedule
            morning_shift = final_schedule[day]["7:00AM - 1:00PM"]
            afternoon_shift = final_schedule[day]["1:00PM - 7:00PM"]
            html_schedule += f"<td><b>Morning(7am-1pm):</b> {morning_shift}<br><b>Afternoon(1pm-7pm):</b> {afternoon_shift}</td>"

        html_schedule += f"""
                </tr>
            </table>
            <p><b>Name:</b> {self.name}</p>
            <p><b>Phone:</b> {self.phone}</p>
            <p><b>Email:</b> {self.email}</p>
            <p><b>Payrate:</b> ${self.payrate:.2f}/hr</p>
            <p><b>Hours Worked:</b> {self.hours_worked} hours</p>
            <p><b>Weekly Pay:</b> ${self.calculate_weekly_pay():.2f}</p>
            <p><b>Monthly Pay:</b> ${self.calculate_monthly_pay():.2f}</p>
        </body>
        </html>
        """

        with open(f"availability_schedule_{self.name}.html", "w") as file:  # writes HTML as file
            file.write(html_schedule)
        print(f"HTML availability schedule generated successfully for {self.name}!")


class Generate_Schedule:  # creates schedule for all employees
    def __init__(self, year, month):
        self.year = year
        self.month = month
        self.schedule = {}

    def create_schedule(self, caregivers):  # randomly assigns person to shifts
        days_in_month = calendar.monthrange(self.year, self.month)[1]
        shifts = ["7:00AM - 1:00PM", "1:00PM - 7:00PM"]

        # initializes schedule
        for day in range(1, days_in_month + 1):
            self.schedule[day] = {shift: None for shift in shifts}

        # assigns caregivers to shifts
        for day in range(1, days_in_month + 1):
            for shift in shifts:
                available_caregivers = [caregiver for caregiver in caregivers]
                if available_caregivers:
                    assigned_caregiver = random.choice(available_caregivers)
                    self.schedule[day][shift] = assigned_caregiver.name
                    assigned_caregiver.hours_worked += 6  # adds 6 hours for each assigned shift

        return self.schedule


class Show_Schedule:  # creates HTML calendar for overall schedule
    def __init__(self, schedule, year, month):
        self.schedule = schedule
        self.year = year
        self.month = month

    def display_schedule_html(self):
        html_schedule = f"""
        <html>
        <head>
            <title>Work Schedule for {calendar.month_name[self.month]} {self.year}</title>
            <style>
                table {{
                    border-collapse: collapse;
                    width: 100%;
                    margin: 20px 0;
                }}
                th, td {{
                    border: 1px solid black;
                    padding: 10px;
                    text-align: center;
                }}
                th {{
                    background-color: #f2f2f2;
                }}
                td {{
                    height: 100px;
                    vertical-align: top;
                }}
            </style>
        </head>
        <body>
            <h1>Work Schedule for {calendar.month_name[self.month]} {self.year}</h1>
            <table>
                <tr>
                    <th>Mon</th>
                    <th>Tue</th>
                    <th>Wed</th>
                    <th>Thu</th>
                    <th>Fri</th>
                    <th>Sat</th>
                    <th>Sun</th>
                </tr>
        """
        first_weekday, days_in_month = calendar.monthrange(self.year, self.month)

        day = 1
        for week in range((days_in_month + first_weekday + 6) // 7):
            html_schedule += "<tr>"
            for weekday in range(7):
                if (week == 0 and weekday < first_weekday) or day > days_in_month:
                    html_schedule += "<td></td>" 
                else:
                    shifts_for_day = self.schedule.get(day, {})
                    morning_shift = shifts_for_day.get("7:00AM - 1:00PM", "NA")
                    afternoon_shift = shifts_for_day.get("1:00PM - 7:00PM", "NA")
                    html_schedule += f"<td>{day}<br><b>AM:</b> {morning_shift}<br><b>PM:</b> {afternoon_shift}</td>"
                    day += 1
            html_schedule += "</tr>"
        html_schedule += """
            </table>
        </body>
        </html>
        """

        with open(f"work_schedule_{self.year}_{self.month}.html", "w") as file:
            file.write(html_schedule)

        print(f"The HTML work schedule for {calendar.month_name[self.month]} {self.year} has been created.")


if __name__ == "__main__":
    print("Welcome to the Shift Availability Scheduler")

    # list of caregivers details
    caregivers = []
    caregiver_details = [
        {"name": "Alice", "phone number": "123-456-7890", "email": "alice@gmail.com", "payrate": 20},
        {"name": "Bob", "phone number": "123-456-7890", "email": "bob@gmail.com", "payrate": 20},
        {"name": "Charlie", "phone number": "123-456-7890", "email": "charlie@gmail.com", "payrate": 20},
        {"name": "David", "phone number": "123-456-7890", "email": "david@gmail.com", "payrate": 20},
        {"name": "Eve", "phone number": "123-456-7890", "email": "eve@gmail.com", "payrate": 20},
        {"name": "Frank", "phone number": "123-456-7890", "email": "frank@gmail.com", "payrate": 20},
        {"name": "Grace", "phone number": "123-456-7890", "email": "grace@gmail.com", "payrate": 20},
        {"name": "John", "phone number": "123-456-7890", "email": "john@gmail.com", "payrate": 20}
    ]

    for details in caregiver_details:
        caregiver = Caregiver_Schedule(details["name"], details["phone number"], details["email"], details["payrate"])
        print(f"\nSetting availability for {caregiver.name}:")
        availability = caregiver.schedule_for_caregiver()
        caregiver.display_schedule_as_html(availability)
        caregivers.append(caregiver)

    # input validation for both year and month
    while True:
        try:
            year = int(input("\nEnter the year for the schedule: "))
            break
        except ValueError:
            print("Invalid. Please enter a number")
            
    while True:
        try:
            month = int(input("Enter the month (1-12): "))
            if month < 1 or month > 12:
                print("Invalid. Please enter a number between 1 and 12")
                continue
            break
        except ValueError:
            print("Invalid. Please enter a number")

    # generates schedule based on availability
    schedule_generator = Generate_Schedule(year, month)
    final_schedule = schedule_generator.create_schedule(caregivers)

    # displays the overall work schedule as an HTML calendar
    show_schedule = Show_Schedule(final_schedule, year, month)
    show_schedule.display_schedule_html()

    for dictionary in caregiver_details:
        first_value = next(iter(dictionary.values()))
        with open(f"work_schedule_{year}_{month}.html", "r") as file:
            contents = file.read()
            worker_shift = contents.count(first_value)
            weekly_salary = str((20 * worker_shift)/4)
            monthly_salary = str((20 * worker_shift))
            with open(f"salary_{first_value}.html", "w") as f:
                f.write(f"Weekly salary: {weekly_salary}.")
                f.write(f"Monthly salary: {monthly_salary}.")
